{
    "name": "brianhenryie/bh-wp-plugin-updater",
    "description": "A WordPress library to add update functionality to plugins.",
    "type": "library",
    "license": "GPL-2.0-or-later",
    "authors": [
        {
            "name": "BrianHenryIE",
            "email": "BrianHenryIE@gmail.com"
        }
    ],
    "minimum-stability": "dev",
    "prefer-stable": true,
    "config": {
        "allow-plugins": {
            "composer/installers": true,
            "cweagans/composer-patches": true,
            "dealerdirect/phpcodesniffer-composer-installer": true,
            "johnpbloch/wordpress-core-installer": true,
            "phpstan/extension-installer": true,
            "alleyinteractive/composer-wordpress-autoloader": true,
            "brianhenryie/composer-fallback-to-git": true,
            "brianhenryie/composer-phpstorm": true,
            "php-http/discovery": true
        },
        "platform": {
            "php": "8.0.5"
        },
        "process-timeout": 0,
        "sort-packages": true
    },
    "autoload": {
        "classmap": [
            "includes/"
        ],
        "files": [
            "bootstrap.php",
            "includes/functions.php"
        ],
        "wordpress": {
            "BrianHenryIE\\WP_Plugin_Updater\\": "includes/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "BrianHenryIE\\WP_Plugin_Updater\\": [
                "tests/unit",
                "tests/wpunit"
            ]
        },
        "classmap": [
            "tests/_support",
            "wordpress"
        ],
        "files": [
            "vendor/wp-cli/handbook/bin/command.php"
        ]
    },
    "repositories": {
        "brianhenryie/composer-phpstorm": {
            "url": "https://github.com/BrianHenryIE/composer-phpstorm",
            "type": "git"
        },
        "outlandish/wpackagist": {
            "type": "composer",
            "url": "https://wpackagist.org"
        }

    },
    "require": {
        "php": ">=8.0",
        "ext-json": "*",
        "art4/requests-psr18-adapter": "*",
        "json-mapper/json-mapper": "*",
        "knplabs/github-api": "^3.0",
        "psr/log": "^1.0",
        "syntatis/wp-plugin-readme-parser": "*"
    },
    "require-dev": {
        "10up/wp_mock": "*",
        "alleyinteractive/composer-wordpress-autoloader": "^1.0",
        "antecedent/patchwork": "^2.1",
        "brianhenryie/bh-wp-logger": "dev-master",
        "brianhenryie/color-logger": "^1.0",
        "brianhenryie/composer-fallback-to-git": "dev-main",
        "brianhenryie/composer-phpstorm": "dev-master",
        "cweagans/composer-patches": "*",
        "dealerdirect/phpcodesniffer-composer-installer": "*",
        "jaschilz/php-coverage-badger": "^2.0",
        "johnpbloch/wordpress": "*",
        "kporras07/composer-symlinks": "dev-master",
        "lucatume/wp-browser": "^4.0",
        "phpcompatibility/phpcompatibility-wp": "*",
        "phpstan/extension-installer": "*",
        "phpstan/phpstan-phpunit": "*",
        "phpunit/phpcov": "*",
        "psr-mock/http-client-implementation": "1.0.0",
        "psr-mock/http-factory-implementation": "*",
        "psr/simple-cache": "^2.0",
        "squizlabs/php_codesniffer": "*",
        "szepeviktor/phpstan-wordpress": "*",
        "wp-cli/dist-archive-command": "dev-main",
        "wp-cli/handbook": "dev-main",
        "wp-cli/wp-cli-bundle": "*",
        "wp-cli/wp-cli-tests": "*",
        "wp-coding-standards/wpcs": "*",
        "wpackagist-plugin/document-generator-for-openapi": "*",
        "wpackagist-plugin/woocommerce": "9.0.1",
        "wpackagist-plugin/wordpress-importer": "*",
        "wpackagist-plugin/wp-rest-api-log": "^1.7",
        "wpackagist-theme/storefront": "^4.6",
        "wpackagist-theme/twentytwentyfour": "*"
    },
    "extra": {
        "patches": {
            "jaschilz/php-coverage-badger": {
                "Allow customising the text": "https://github.com/JASchilz/PHPCoverageBadge/pull/1.patch"
            },
            "wp-cli/handbook": {
                "Add wp handbook gen-custom for custom commands": "https://github.com/wp-cli/handbook/pull/526.patch"
            }
        },
        "phpstorm": {
            "exclude_folders": {
                "folders": [
                    "example-plugin/vendor",
                    "vendor/php-stubs/woocommerce-stubs",
                    "vendor/wordpress/wordpress/src",
                    "vendor/wordpress/wordpress/build",
                    "wp-content/plugins/bh-wp-plugin-updater",
                    "wordpress/wp-content"
                ],
                "composer-symlinks": false
            }
        },
        "symlinks": {}
    },
    "scripts": {
        "post-install-cmd": [
            "@create-symlinks",
            "rm -rf wordpress/wp-content"
        ],
        "post-update-cmd": [
            "@create-symlinks",
            "rm -rf wordpress/wp-content"
        ],
        "create-symlinks": [
            "Kporras07\\ComposerSymlinks\\ScriptHandler::createSymlinks"
        ],
        "configure-phpstorm": [
            "BrianHenryIE\\ComposerPhpStorm\\ExcludeFolders::update",
            "BrianHenryIE\\ComposerPhpStorm\\PHPUnitRunConfigurations::update"
        ],
        "test": [
            "codecept run unit",
            "codecept run wpunit"
        ],
        "test-coverage": [
            "codecept run unit --coverage unit.cov",
            "codecept run wpunit --coverage wpunit.cov",
            "phpcov merge --clover tests/_output/clover.xml --html tests/_output/html tests/_output;",
            "open tests/_output/html/index.html"
        ],
        "cs-fix": [
            "phpcbf || true",
            "phpcs || true",
            "phpstan analyse --memory-limit 1G"
        ],
        "cs-fix-changes": [
            "updated_files=$( git status | grep 'modified:\\s.*.php$' | cut -c14- | awk '{ printf(\"%s \", $0) }' ); phpcbf $(echo $updated_files); phpcs $(echo $updated_files); phpstan analyse $(echo $updated_files) --memory-limit 1G"
        ],
        "php-compatibility": [
            "phpcs -p includes templates vendor-prefixed --standard=PHPCompatibilityWP --runtime-set testVersion 8.0-"
        ],
        "create-plugin-archive": [
            "wp i18n make-pot src languages/$(basename \"$PWD\").pot --domain=$(basename \"$PWD\")",
            "wp dist-archive . ./dist-archive --plugin-dirname=$(basename \"$PWD\") --create-target-dir"
        ],
        "github-actions": [
            "act -P ubuntu-latest=shivammathur/node:latest"
        ],
        "sync-composer-wpenv": [
            "find wp-content/plugins -type d -depth 1 ! -type l | sort -h | jq -Rn '[inputs]' | jq 'reduce .[] as $item ({}; . + {$item:$item})' | jq '.[] |= \"./\\(.)\"' | jq '. | {mappings: .}' | jq --sort-keys -s '.[] * $existing[]' --slurpfile existing .wp-env.json | sponge .wp-env.json ",
            "for name in $(cat .wp-env.json | jq '.mappings | values[]' | sed -r 's/^\\\"|\\\"$//g'); do [ ! -d $name ] && [ ! -f $name ] && echo $name && jq 'del(.. | select(. ==\"'$name'\"))' .wp-env.json | sponge .wp-env.json; done; exit 0;"
        ],
        "generate-openapi": [
            "npx wp-env run cli /var/www/html/wp-content/plugins/example-plugin/vendor/bin/wp openapi-generator export-file example-plugin/v1 --destination=./openapi/example-plugin-openapi.json --extract-common-types;",
            "cat ./openapi/example-plugin-openapi.json | jq 'del(.servers) | del(.paths.\"/\") | .jsonSchemaDialect = \"https://spec.openapis.org/oas/3.1/dialect/base\"' | sponge ./openapi/example-plugin-openapi.json"
        ],
        "generate-wp-cli-docs": [
            "npx wp-env run cli /var/www/html/wp-content/plugins/example-plugin/vendor/bin/wp handbook gen-custom example-plugin --output_dir=docs/wp-cli;",
            "rm -rf docs/wp-cli/example-plugin/logger; rm docs/wp-cli/example-plugin/logger.md;"
        ]
    },
    "replace": {
        "rmccue/requests": "*"
    }
}
